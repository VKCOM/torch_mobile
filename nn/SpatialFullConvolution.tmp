local SpatialFullConvolution, parent = torch.class('nn.SpatialFullConvolution','nn.Module')

function SpatialFullConvolution:__init(nInputPlane, nOutputPlane, kW, kH, dW, dH, padW, padH, adjW, adjH)
   parent.__init(self)

   dW = dW or 1
   dH = dH or 1

   self.nInputPlane = nInputPlane
   self.nOutputPlane = nOutputPlane
   self.kW = kW
   self.kH = kH
   self.dW = dW
   self.dH = dH
   self.padW = padW or 0
   self.padH = padH or 0
   self.adjW = adjW or 0
   self.adjH = adjH or 0

   if self.adjW > self.dW - 1 or self.adjH > self.dH - 1 then
      error('adjW and adjH must be smaller than self.dW - 1' ..
            ' and self.dH - 1 respectively')
   end

   self.weight = torch.Tensor(nInputPlane, nOutputPlane, kH, kW)
   self.gradWeight = torch.Tensor(nInputPlane, nOutputPlane, kH, kW)
   self.bias = torch.Tensor(self.nOutputPlane)
   self.gradBias = torch.Tensor(self.nOutputPlane)

   self.ones = torch.Tensor()

   self:reset()
end

function SpatialFullConvolution:reset(stdv)
   if stdv then
      stdv = stdv * math.sqrt(3)
   else
      local nInputPlane = self.nInputPlane
      local kH = self.kH
      local kW = self.kW
      stdv = 1/math.sqrt(kW*kH*nInputPlane)
   end
   self.weight:apply(function()
                        return torch.uniform(-stdv, stdv)
                     end)
   self.bias:apply(function()
                        return torch.uniform(-stdv, stdv)
                     end)
end

local function calculateAdj(targetSize, ker, pad, stride)
  return (targetSize + 2 * pad - ker) % stride
end

function SpatialFullConvolution:updateOutput(input)

  local inputTensor = input
  local adjW, adjH = self.adjW, self.adjH 

  if type(inputTensor) == 'table' then
    inputTensor = input[1]
    local targetTensor = input[2]
    local tDims = targetTensor:dim()
    local tH = targetTensor:size(tDims-1)
    local tW = targetTensor:size(tDims)
    adjW = calculateAdj(tW, self.kW, self.padW, self.dW)
    adjH = calculateAdj(tH, self.kH, self.padH, self.dH)
    self.columns = self.finput or input[1].new()
  else
    self.columns = self.finput or input.new()
  end

  return input.nn.SpatialFullConvolution_updateOutput(self, input)
end

function SpatialFullConvolution:updateGradInput(input, gradOutput)
   if self.gradInput then
      return input.nn.SpatialFullConvolution_updateGradInput(self, input, gradOutput)
   end
end
function SpatialFullConvolution:accGradParameters(input, gradOutput, scale)
   return input.nn.SpatialFullConvolution_accGradParameters(self, input, gradOutput, scale)
end

